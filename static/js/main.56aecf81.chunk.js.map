{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["QuotesAndAuthors","id","class","this","props","quote","tag","text","title","author","onClick","generateRandomQuote","href","encodeURIComponent","target","type","React","Component","App","getDataApi","a","fetch","fetchApi","json","jsonApi","quotesArr","quotes","setState","arr","randomNumbers","Math","floor","random","state","length","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAGMA,G,6KAGF,OACE,sBAAKC,GAAG,YAAYC,MAAM,mBAA1B,UACI,qBAAKA,MAAM,cAAX,SACGC,KAAKC,MAAMC,MAAMC,MAExB,sBAAKJ,MAAM,YAAX,UACE,6BAAYA,MAAM,kBAAlB,UACE,oBAAGD,GAAG,OAAN,UAAa,mBAAGC,MAAM,sBAAtB,IAAgDC,KAAKC,MAAMC,MAAME,KAAjE,IAAuE,mBAAGL,MAAM,uBAAhF,OACA,wBAAQD,GAAG,SAASC,MAAM,oBAA1B,SAA8C,sBAAMM,MAAM,eAAZ,SAA4BL,KAAKC,MAAMC,MAAMI,cAE7F,oBAAGR,GAAG,cAAcS,QAASP,KAAKC,MAAMO,oBAAqBC,KAAM,yDACjEC,mBAAmB,IAAMV,KAAKC,MAAMC,MAAME,KAAvB,QAAkDJ,KAAKC,MAAMC,MAAMI,QACxFP,MAAM,kBAAkBY,OAAO,OAF/B,UAEsC,mBAAGZ,MAAM,mBAF/C,kBAGA,wBAAQD,GAAG,YAAYc,KAAK,SAASb,MAAM,oBAAoBQ,QAASP,KAAKC,MAAMO,oBAAnF,iC,GAhBuBK,IAAMC,YA0EtBC,E,kDAlDb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAQVe,WATqB,sBASR,gCAAAC,EAAA,sEACQC,MAAM,8DADd,cACTC,EADS,gBAEOA,EAASC,OAFhB,OAETC,EAFS,OAGTC,EAAYD,EAAQE,OACxB,EAAKC,SAAS,CACZlB,OAAQgB,EAAU,GAAGhB,OACrBH,IAAKmB,EAAU,GAAGnB,IAClBC,KAAMkB,EAAU,GAAGlB,KACnBqB,IAAMH,IARK,2CATQ,EA0BrBd,oBAAsB,WACpB,IAAIkB,EAAgBC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAML,IAAIM,QAE9D,EAAKP,SAAS,CACZlB,OAAQ,EAAKwB,MAAML,IAAIC,GAAepB,OACtCH,IAAK,EAAK2B,MAAML,IAAIC,GAAevB,IACnCC,KAAM,EAAK0B,MAAML,IAAIC,GAAetB,QA9BpC,EAAK0B,MAAQ,CACXxB,OAAQ,KACRH,IAAK,KACLC,KAAM,MALS,E,gEAsBrBJ,KAAKgB,e,+BAgBH,OACE,sBAAKjB,MAAM,kBAAX,UACE,oBAAIA,MAAM,cAAV,kCACE,cAAC,EAAD,CACES,oBAAqBR,KAAKQ,oBAAoBwB,KAAKhC,MACnDE,MAAOF,KAAK8B,e,GA5CJjB,IAAMC,WCdTmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.56aecf81.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass QuotesAndAuthors extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <div id=\"quote-box\" class=\"card text-center\">\r\n          <div class=\"card-header\">\r\n            {this.props.quote.tag}\r\n          </div>\r\n      <div class=\"card-body\">\r\n        <blockquote class=\"blockquote mb-0\">\r\n          <p id=\"text\"><i class=\"fas fa-quote-left\"></i> {this.props.quote.text} <i class=\"fas fa-quote-right\"></i> </p>\r\n          <footer id=\"author\" class=\"blockquote-footer\"><cite title=\"Source Title\">{this.props.quote.author}</cite></footer>\r\n        </blockquote>\r\n        <a id=\"tweet-quote\" onClick={this.props.generateRandomQuote} href={'https://twitter.com/intent/tweet?hashtags=quotes&text=' +\r\n          encodeURIComponent('\"' + this.props.quote.text + '\" ' + '\\n' + '-' + this.props.quote.author)\r\n      } class=\"btn btn-primary\" target=\"_top\"><i class=\"fab fa-twitter\"></i> Tweet Quote</a>\r\n        <button id=\"new-quote\" type=\"button\" class=\"btn btn-secondary\" onClick={this.props.generateRandomQuote}>New Quote</button>\r\n      </div>\r\n    </div>\r\n      )\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      author: null,\r\n      tag: null,\r\n      text: null\r\n    }\r\n  }\r\n\r\ngetDataApi = async () => {\r\nlet fetchApi = await fetch('https://goquotes-api.herokuapp.com/api/v1/random?count=100')\r\nlet jsonApi = await fetchApi.json()\r\nlet quotesArr = jsonApi.quotes\r\nthis.setState({\r\n  author: quotesArr[0].author,\r\n  tag: quotesArr[0].tag,\r\n  text: quotesArr[0].text,\r\n  arr : quotesArr\r\n})\r\n}\r\n\r\ncomponentDidMount() {\r\nthis.getDataApi()\r\n}\r\n\r\n\r\ngenerateRandomQuote = () => {\r\n  let randomNumbers = Math.floor(Math.random() * this.state.arr.length);\r\n   \r\n  this.setState({\r\n    author: this.state.arr[randomNumbers].author,\r\n    tag: this.state.arr[randomNumbers].tag,\r\n    text: this.state.arr[randomNumbers].text\r\n  })\r\n}\r\n\r\n\r\nrender() {\r\n  return (\r\n    <div class=\"container-fluid\">\r\n      <h1 class=\"text-center\">Random Quote Machine</h1>\r\n        <QuotesAndAuthors \r\n          generateRandomQuote={this.generateRandomQuote.bind(this)}\r\n          quote={this.state}\r\n        /> \r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}